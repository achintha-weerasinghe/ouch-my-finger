"""The root query type which gives access points into the data universe."""
type Query {
  animals(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Animal`."""
    orderBy: [AnimalsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnimalCondition

    """Filter results to only those of the given types"""
    only: [AnimalType!] @deprecated(reason: "EXPERIMENTAL")
  ): AnimalsConnection
  animalById(id: String!): Animal
  cats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cat`."""
    orderBy: [CatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CatCondition
  ): CatsConnection
  dogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dog`."""
    orderBy: [DogsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DogCondition
  ): DogsConnection
}

"""A connection to a list of `Animal` values."""
type AnimalsConnection {
  """A list of `Animal` objects."""
  nodes: [Animal]!

  """
  A list of edges which contains the `Animal` and cursor to aid in pagination.
  """
  edges: [AnimalsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Animal` you could get from the connection."""
  totalCount: Int!
}

interface Animal {
  id: UUID
  name: String
  age: Int
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A `Animal` edge in the connection."""
type AnimalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Animal` at the end of the edge."""
  node: Animal
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Animal`."""
enum AnimalsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
}

"""
A condition to be used against `Animal` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AnimalCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `age` field."""
  age: Int
}

enum AnimalType {
  Cat
  Dog
}

"""A connection to a list of `Cat` values."""
type CatsConnection {
  """A list of `Cat` objects."""
  nodes: [Cat]!

  """
  A list of edges which contains the `Cat` and cursor to aid in pagination.
  """
  edges: [CatsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cat` you could get from the connection."""
  totalCount: Int!
}

type Cat implements Animal {
  id: UUID!
  name: String
  age: Int
  breed: String
  indoor: Boolean
}

"""A `Cat` edge in the connection."""
type CatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cat` at the end of the edge."""
  node: Cat
}

"""Methods to use when ordering `Cat`."""
enum CatsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  BREED_ASC
  BREED_DESC
  INDOOR_ASC
  INDOOR_DESC
}

"""
A condition to be used against `Cat` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CatCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `age` field."""
  age: Int

  """Checks for equality with the object’s `breed` field."""
  breed: String

  """Checks for equality with the object’s `indoor` field."""
  indoor: Boolean
}

"""A connection to a list of `Dog` values."""
type DogsConnection {
  """A list of `Dog` objects."""
  nodes: [Dog]!

  """
  A list of edges which contains the `Dog` and cursor to aid in pagination.
  """
  edges: [DogsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dog` you could get from the connection."""
  totalCount: Int!
}

type Dog implements Animal {
  id: UUID!
  name: String
  age: Int
  breed: String
  trained: Boolean
}

"""A `Dog` edge in the connection."""
type DogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dog` at the end of the edge."""
  node: Dog
}

"""Methods to use when ordering `Dog`."""
enum DogsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  BREED_ASC
  BREED_DESC
  TRAINED_ASC
  TRAINED_DESC
}

"""
A condition to be used against `Dog` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DogCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `age` field."""
  age: Int

  """Checks for equality with the object’s `breed` field."""
  breed: String

  """Checks for equality with the object’s `trained` field."""
  trained: Boolean
}
